---
name: Create repository discussion

# It is scheduled to execute every day at 12AM UTC.
on:
  schedule:
    - cron: '0 0 * * *'

jobs:
  create-discussion:
    permissions:
      discussions: write
    runs-on: ubuntu-22.04
    steps:
      - name: Get repository information
        id: get-repository-info
        uses: octokit/graphql-action@v2.x
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          variables: |
            owner: ${{ github.repository_owner }}
            name: ${{ github.event.repository.name }}
          query: |
            query GetRepositoryInformation ($name: String!, $owner: String!) {
              repository(name: $name, owner: $owner) {
                id
                discussionCategory(slug: "test") {
                  id
                }
              }
            }

      # This step can be omitted if the current date is not necessary.
      - name: Get current date
        id: current-date
        # More date formats: https://www.ibm.com/docs/en/cmofm/9.0.0?topic=SSEPCD_9.0.0/com.ibm.ondemand.mp.doc/arsa0257.html
        run: echo "date=$(date +'%d %B %Y')" >> $GITHUB_OUTPUT

      - name: Create repository discussion
        id: create-repository-discussion
        uses: octokit/graphql-action@v2.x
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          variables:
            | # Update the "body" and "title" variables with the values you prefer.
            body: "<b>This is my discussion body</b><br/><h3>Hello, world!</h3>"
            title: "Discussion created on ${{ steps.current-date.outputs.date }}"
            repositoryId: ${{ fromJSON(steps.get-repository-info.outputs.data).repository.id }}
            categoryId: ${{ fromJSON(steps.get-repository-info.outputs.data).repository.discussionCategory.id }}
          query: |
            mutation CreateDiscussionMutation ($title: String!, $body: String!, $repositoryId: ID!, $categoryId: ID!) {
              createDiscussion(input: { title: $title, body: $body, repositoryId: $repositoryId, categoryId: $categoryId }) {
                discussion {
                  title
                }
              }
            }

      - name: Discussion successfully created
        run: echo "Created discussion '${{ fromJSON(steps.create-repository-discussion.outputs.data).createDiscussion.discussion.title }}'"
